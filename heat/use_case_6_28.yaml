heat_template_version: 2016-10-14

description: Use Case 6.26 - Cloning resources

parameters:
  tenant_net:
    type: string
    description: ID of MGMT network into which servers get deployed
    default: Megafon-internal

  tenant_subnet:
    type: string
    default: 0d01190e-8d0e-448d-8976-edef24933101

  public_network:
    type: string
    default: External-network

  public_subnet:
    type: string
    default: f01d0b59-c07f-46b1-959e-a3a7a4f7aa42 

  image:
    type: string
    description: image id
    default: c70de188-7b03-42de-bbb6-10e228e490a0 

  app_port:
    type: string
    default: 8080

  lb_port:
    type: string
    default: 80

resources:
  
  Server1: 
    type: OS::Nova::Server
    properties: 
      networks: [{ network: { get_param: tenant_net }}]
      name: Instance1
      flavor: m1.small
      image: {get_param: image}
      key_name: megafon
      security_groups: [{get_resource: sec_group}]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/sh -v
            Body=$(hostname)
            Response="HTTP/1.1 200 OK\r\nContent-Length: ${#Body}\r\n\r\n$Body"
            while true ; do echo $Response | nc -llp PORT; done
          params:
            PORT: { get_param: app_port }

  pool_member1:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ Server1, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: tenant_subnet }

  Server2:
    type: OS::Nova::Server
    properties:
      networks: [{ network: { get_param: tenant_net }}]
      name: Instance2
      flavor: m1.small
      image: {get_param: image}
      key_name: megafon
      security_groups: [{get_resource: sec_group}]
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #! /bin/sh -v
            Body=$(hostname)
            Response="HTTP/1.1 200 OK\r\nContent-Length: ${#Body}\r\n\r\n$Body"
            while true ; do echo $Response | nc -llp PORT; done
          params:
            PORT: { get_param: app_port }

  pool_member2:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ Server2, first_address ]}
      protocol_port: { get_param: app_port }
      subnet: { get_param: tenant_subnet }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    properties:
      delay: 3
      type: TCP 
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }

  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }

  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTP
      protocol_port: { get_param: lb_port }

  loadbalancer:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_param: tenant_subnet  }
 
  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming traffic from anywhere.
      name: Project Security Group 
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: { get_param: app_port }
          port_range_max: { get_param: app_port }


  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

outputs:

  lburl:
    value:
      str_replace:
        template: http://IP_ADDRESS:PORT
        params:
          IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
          PORT: { get_param: lb_port }
    description: >
      URL to access exposed LB address
